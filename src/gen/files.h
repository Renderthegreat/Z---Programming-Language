#define HEADER_H__H (std::string)"#define name \"Z# Shared Toolkit\"\n\n/*\n * NOTICE: SOFTWARE GENERATED BY THIS CODE IS NOT PROTECTED UNDER THE DMCA\n *\n * Any software, code, or program generated by the Z# programming language \n * is explicitly and permanently exempt from the protections of the \n * Digital Millennium Copyright Act (DMCA). \n *\n * This means:\n * 1. **You may freely modify, adapt, or redistribute the generated code** \n *    without fear of legal consequences under copyright law, including \n *    DMCA takedown requests or anti-circumvention claims.\n * \n * 2. **No one, including the original author(s) of the generated code, \n *    may enforce restrictions that would prevent you from editing, \n *    improving, or repurposing the software.**\n *\n * 3. **You are protected from any legal liability that may arise from \n *    modifying or redistributing the generated software.**\n *\n * RATIONALE:\n * The Z# programming language is built with the goal of ensuring software \n * remains fully open, modifiable, and free from legal restrictions. Any form \n * of legal protection that prohibits modification or restricts user freedom \n * runs counter to the principles of Z#. By generating code with Z#, the \n * user agrees to these terms and acknowledges the freedom to modify \n * software without legal interference.\n *\n * DISCLAIMER:\n * This header applies only to software or code generated *using* the \n * Z# programming language. The Z# language itself and its implementation \n * are copyrighted and protected by their respective authors unless explicitly \n * stated otherwise.\n *\n * By using, modifying, or redistributing software created with Z#, you \n * acknowledge and respect the right of others to do the same.\n */\n\n.equ MAP_START, 0x20000000\n.equ MAP_SIZE, 65536\n\n.section .map, \"aw\", %progbits\nmap:\n    .space MAP_SIZE\n\n.text\n\n// ARCHITECTURE SPECIFIC\n\n#ifdef __x86_64__\n#   define AMD64 1\n#   define BITS AMD64\n    .print \"\e[1;31mZ#\e[0m Compiling for AMD64\"\n\n#	define ax rax   // V\n#	define bx rbx   // VI\n#	define cx rcx   // VII\n#	define dx rdx   // IIX\n\n#	define si rsi\n#	define di rdi\n#	define bp rbp\n#	define sp rsp\n#endif\n\n#ifdef __i386__\n#   define AMD32 1\n#   define BITS AMD32\n    .print \"\e[1;31mZ#\e[0m Compiling for AMD32\"\n\n#	define ax eax   // V\n#	define bx ebx   // VI\n#	define cx ecx   // VII\n#	define dx edx   // IIX\n\n#	define si esi\n#	define di edi\n#	define bp ebp\n#	define sp esp\n#endif\n\n#ifdef __aarch64__\n#   define ARM64 1\n#   define BITS ARM64\n    .print \"\e[1;31mZ#\e[0m Compiling for ARM64\"\n\n#	define ax x0    // V\n#	define bx x1    // VI\n#	define cx x2    // VII\n#	define dx x3    // IIX\n\n#	define si x4\n#	define di x5\n#	define bp x29\n#   define sp rp\n    .macro PRINT str\n        ldr ax, =HELLO\n        mov bx, 0\n\n        bl printf\n        ret\n    .endm\n#endif\n\n#ifndef ax\n    // COMPILING IS NOT SUPPORTED, ERROR OUT\n    .error \"\e[1;31mZ#\e[0m Platform not supported\e[0m!\"\n#endif\n\n// COMPILING IS SUPPORTED\n\n// SHORT MACROS\n\n#define FUNCDEF(x) _FUNC_##x\n#define TYPEDEF(x) _TYPE_##x\n\n// ERRORS / WARNINGS\n\n.set ERRORS, 1\n\n.macro NOT_IMPLEMENTED SOURCE, ACTION\n    .print \"\e[1;35m‚ñà‚ñà \e[0;35mNot Implemented yet\e[0m!\"\n    .print \"\e[1;35m‚ñà‚ñà \\SOURCE \\ACTION\e[0m\"\n    ZS WARNING\n.endm\n\n.macro INVALID_ACTION SOURCE, ACTION\n    .print \"\e[1;91m‚ñà‚ñà \e[5;91mInvalid Instruction '\\ACTION'' for '\\SOURCE''\e[0m!\"\n    ZS ERROR\n.endm\n\n// COMPILE\n.set ERRORS, 0\n.set WARNINGS, 0\n\n.macro ERROR_SUMMARY, COUNT\n    .print \"\e[1;92mZ#\e[1;91m Compilation Failed with \\COUNT Error(s)\e[0m!\"\n.endm\n\n.macro WARNING_SUMMARY, COUNT\n    .print \"\e[1;95mZ#\e[1;95m Compilation Successful With \\COUNT Warning(s)\e[0m!\"\n.endm\n\n.macro SUCCESS_SUMMARY\n    .print \"\e[1;92mZ#\e[1;92m Compilation Successful\e[0m!\"\n.endm\n\n.macro SUMMARY\n    .altmacro\n    .if ERRORS == 0 && WARNINGS == 0\n        SUCCESS_SUMMARY\n    .elseif ERRORS == 0\n        WARNING_SUMMARY %WARNINGS\n    .else\n        ERROR_SUMMARY %ERRORS\n    .endif\n    .print \"\e[1;96m‚ñà‚ñà\e[0m ü´é  + üêß = ‚ô•Ô∏è\"\n.endm\n\n// SYSTEMS\n\n.macro ZS, ACTION, V\n    .ifc \\ACTION, INIT\n        MAP INIT\n        .set VALID_ACTION, 1\n    .endif\n    .ifc \\ACTION, ERROR\n        .set ERRORS, ERRORS + 1\n        .set VALID_ACTION, 1\n    .endif\n    .ifc \\ACTION, WARNING\n        .set WARNINGS, WARNINGS + 1\n        .set VALID_ACTION, 1\n    .endif\n    .ifc \\ACTION, END\n        SUMMARY\n        .set VALID_ACTION, 1\n    .endif\n    .if VALID_ACTION == 0\n        INVALID_ACTION \"ZS\", \\ACTION\n    .endif\n\n    .set VALID_ACTION, 0\n.endm\n\n.macro LOCAL, ACTION, V, VI, VII\n    .ifc \\ACTION, CALL\n#       if BITS == AMD64\n            CALL \\V\n#       endif\n#       if BITS == AMD32\n            CALL \\V\n#       endif\n#       if BITS == ARM64\n            BL \\V\n#       endif\n        .set VALID_ACTION, 1\n    .endif\n    .if VALID_ACTION == 0\n        INVALID_ACTION \"LOCAL\", \\ACTION\n    .endif\n\n    .set VALID_ACTION, 0\n.endm\n\n\n.macro MAP ACTION, V, VI\n    .ifc \\ACTION, INIT\n\n        .set VALID_ACTION, 1\n    .endif\n    .if VALID_ACTION == 0\n        INVALID_ACTION \"MAP\", \\ACTION\n    .endif\n    .set VALID_ACTION, 1\n.endm\n\n\n.macro POOL ACTION, V, VI\n    .ifc \\ACTION, CREATE\n\n        .set VALID_ACTION, 1\n    .endif\n    .ifc \\ACTION, SWAP\n\n        .set VALID_ACTION, 1\n    .endif\n    .if VALID_ACTION == 0\n        INVALID_ACTION, \"POOL\", \\ACTION\n    .endif\n    .set VALID_ACTION, 0\n.endm\n\n.macro FUNCTION ACTION, V\n    .ifc \\ACTION, CALL\n        LOCAL CALL, FUNCDEF(\\V) \n        .set VALID_ACTION, 1\n    .endif\n    .ifc \\ACTION, LOCAL\n        NOT_IMPLEMENTED \"FUNCTION LOCAL\"\n        .set VALID_ACTION, 1\n    .endif\n    .if VALID_ACTION == 0\n        INVALID_ACTION \"FUNCTION\", \\ACTION\n    .endif\n    .set VALID_ACTION, 0\n.endm"
#define RULES_H__H (std::string)" //\n // NOTICE: SOFTWARE GENERATED BY THIS CODE IS NOT PROTECTED UNDER THE DMCA\n //\n // Any software, code, or program generated by the Z# programming language \n // is explicitly and permanently exempt from the protections of the \n // Digital Millennium Copyright Act (DMCA). \n //\n // This means:\n // 1. **You may freely modify, adapt, or redistribute the generated code** \n //    without fear of legal consequences under copyright law, including \n //    DMCA takedown requests or anti-circumvention claims.\n // \n // 2. **No one, including the original author(s) of the generated code, \n //    may enforce restrictions that would prevent you from editing, \n //    improving, or repurposing the software.**\n //\n // 3. **You are protected from any legal liability that may arise from \n //    modifying or redistributing the generated software.**\n //\n // RATIONALE:\n // The Z# programming language is built with the goal of ensuring software \n // remains fully open, modifiable, and free from legal restrictions. Any form \n // of legal protection that prohibits modification or restricts user freedom \n // runs counter to the principles of Z#. By generating code with Z#, the \n // user agrees to these terms and acknowledges the freedom to modify \n // software without legal interference.\n //\n // DISCLAIMER:\n // This header applies only to software or code generated *using* the \n // Z# programming language. The Z# language itself and its implementation \n // are copyrighted and protected by their respective authors unless explicitly \n // stated otherwise.\n //\n // By using, modifying, or redistributing software created with Z#, you \n // acknowledge and respect the right of others to do the same.\n //\n\n.section .zsharp, \"a\"\n.global zsharp_metadata\nzsharp_metadata:\n    .ascii  \"Z#\"                // Z# identifier\n    .long   1732860507       // Build timestamp (UNIX time)\n    .byte   0"
